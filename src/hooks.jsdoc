/**
 *
 * @namespace   Hooks
 * @description Hook functions for the ModPE API. These functions are used to
 *              execute other functions when certain game events occur.
 *
 * @todo code examples
 *
 *////

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    attackHook
 * @description Callback that is triggered when an entity is attacked.
 *
 * @param {long} attackerId - the attacker's native entity id
 * @param {long} victimId   - the victim's native entity id
 *
 * @example
 * <caption>Credit: {@link https://goo.gl/4FYd5w|Connor4898}</caption>
 *
 * // who is attacking who?
 * function attackHook(attacker, victim) {
 *   if (attacker == Player.getEntity()) {
 *     clientMessage("Sir, you shouldn't attack others.");
 *   } else {
 *     clientMessage("Sir, you are under attack!");
 *   }
 * }
 *
 *////

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    blockEventHook
 * @description Callback that is triggered when a chest is opened or closed.
 *
 * @param {int} x    - the chest's x coordiante
 * @param {int} y    - the chest's y coordiante
 * @param {int} z    - the chest's z coordiante
 * @param {int} type - the event type (seems to always be 1)
 * @param {int} data - the open/close data (0 = closing, 1 = opening, 2 = open)
 *
 * @example
 * // Announce the opening of a chest
 * function blockEventHook(x, y, z, eventType, data) {
 *   if (data === 1) {
 *     clientMessage("A chest was opened at location " + x + " : " + y + " : " + z);
 *   } else if (data === 0) {
 *     clientMessage("The chest has been closed");
 *   }
 * }
 *
 *////


/**
 *
 * @instance
 * @memberof    Hooks
 * @function    chatHook
 * @description Callback that is triggered when a chat message is sent
 *
 * @param {string} text - the message text
 *
 * @example
 * // repeat after me
 * function chatHook(text) {
 *   clientMessage(ChatColor.RED + text);
 * }
 *
 *////

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    chatReceiveHook
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function chatReceiveHook(String_text, String_senderName) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    deathHook
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function deathHook(int_attackerId, int_victimId) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    destroyBlock
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function destroyBlock(int_x, int_y, int_z, int_side) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    eatHook
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function eatHook(hearts, saturationRatio) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    entityAddedHook
 * @description ?
 *
 *////
function entityAddedHook(int_entityId) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    entityRemovedHook
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function entityRemovedHook(int_entityId) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    explodeHook
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function explodeHook(entity, x, y, z, power, onFire) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    leaveGame
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function leaveGame() {}

/**
 *
 * @todo better example once this is working in 0.13
 *
 * @instance
 * @memberof    Hooks
 * @function    levelEventHook
 * @description Callback that is triggered when a door is opened or closed.
 *
 * @param {int} player    - the player entity that activated the door
 * @param {int} eventType - the event type (seems to always be 1)
 * @param {int} x         - the door's x coordiante
 * @param {int} y         - the door's y coordiante
 * @param {int} z         - the door's z coordiante
 * @param {int} data      - the open/close data (0 = closing, 1 = opening, 2 = open)
 *
 * @example
 * // Announce the opening of a door
 * function levelEventHook(player, eventType, x, y, z, data) {
 *   if (data === 1) {
 *     clientMessage("A door was opened at location " + x + " : " + y + " : " + z);
 *   } else if (data === 0) {
 *     clientMessage("The door has been closed");
 *   }
 * }
 *
 *////

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    modTick
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function modTick() {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    newLevel
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function newLevel() {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    procCmd
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function procCmd(String_cmd) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    selectLevelHook
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function selectLevelHook() {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    serverMessageReceiveHook
 * @description ?
 *
 * @example
 * // code here
 *
 *////
function serverMessageReceiveHook(String_str) {}

/**
 *
 * @todo confirm this and refine description
 *
 * @instance
 * @memberof    Hooks
 * @function    startDestroyBlock
 * @description Callback function that is triggered when a block
 *              starts being destroyed.
 *
 * @param {int} x         - the x coordinate of the block
 * @param {int} y         - the y coordinate of the block
 * @param {int} z         - the z coordinate of the block
 * @param {int} blockSide - the side of the block that was tapped
 *
 * @example
 * // code here
 *
 *////

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    useItem
 * @description Callback function that is triggered when an item is used
 *              on a block.
 *
 * @param {int} x           - the x coordinate of the block
 * @param {int} y           - the y coordinate of the block
 * @param {int} z           - the z coordinate of the block
 * @param {int} itemid      - the ID of the item used
 * @param {int} blockid     - the ID of the block
 * @param {int} blockSide   - the side of the block that was tapped
 * @param {int} blockDamage - the damage data for the block
 *
 * @example
 * // code here
 *
 *////
