/**
 *
 * @namespace   Hooks
 * @description Event listeners for the ModPE API. These functions are
 *              used to execute other functions when certain actions are
 *              performed.
 *
 * @todo code examples
 *
 *////

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    attackHook
 * @description Event listener that is triggered when an entity is attacked
 *              When the event is fired, the following data is sent as
 *              arguments to this function:
 *
 * @param {entity} attackerId - the attacker's native entity id
 * @param {entity} victimId   - the victim's native entity id
 *
 * @example
 * <caption>Credit: {@link https://goo.gl/4FYd5w|Connor4898}</caption>
 *
 * // who is attacking who?
 * function attackHook(attacker, victim) {
 *   if (attacker == Player.getEntity()) {
 *     clientMessage("Sir, you shouldn't attack others.");
 *   } else {
 *     clientMessage("Sir, you are under attack!");
 *   }
 * }
 *
 *////

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    blockEventHook
 * @description blockEventHook description
 *
 * @param   {int}    x    - description
 * @param   {int}    y    - description
 * @param   {int}    z    - description
 * @param   {Object} type - description
 * @param   {Object} data - description
 *
 * @example
 * <caption>[credit for example]</caption>
 *
 * // [opening comment]
 * [example code]
 *
 *////
function blockEventHook(x, y, z, type, data) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    chatHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function chatHook(text) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    chatReceiveHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function chatReceiveHook(String_text, String_senderName) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    deathHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function deathHook(int_attackerId, int_victimId) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    destroyBlock
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function destroyBlock(int_x, int_y, int_z, int_side) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    eatHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function eatHook(hearts, saturationRatio) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    entityAddedHook
 * @description ?
 *
 ///
function entityAddedHook(int_entityId) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    entityRemovedHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function entityRemovedHook(int_entityId) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    explodeHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function explodeHook(entity, x, y, z, power, onFire) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    leaveGame
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function leaveGame() {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    levelEventHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function levelEventHook(player, eventType, x, y, z, data) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    modTick
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function modTick() {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    newLevel
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function newLevel() {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    procCmd
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function procCmd(String_cmd) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    selectLevelHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function selectLevelHook() {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    serverMessageReceiveHook
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function serverMessageReceiveHook(String_str) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    startDestroyBlock
 * @description ?
 *
 * @example
 *
 * // code here
 *
 *////
function startDestroyBlock(int_x, int_y, int_z, int_side) {}

/**
 *
 * @instance
 * @memberof    Hooks
 * @function    useItem
 * @description Event listener that is triggered when an item is used
 *              to tap or destroy a block. When the event is fired, the
 *              following data is sent as arguments to this function:
 *
 * @param {int} x           - the x coordinate of the block
 * @param {int} y           - the y coordinate of the block
 * @param {int} z           - the z coordinate of the block
 * @param {int} itemid      - the ID of the item used
 * @param {int} blockid     - the ID of the block
 * @param {int} blockSide   - the side of the block that was tapped
 * @param {int} blockDamage - the damage data for the block
 *
 * @example
 *
 * // code here
 *
 *////
