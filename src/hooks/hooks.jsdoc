/**
 *
 * @namespace   Hooks
 * @description Event listeners for the ModPE API. These functions are
 *              used to execute other functions when certain actions are
 *              performed.
 *
 * @todo code examples
 *
 *////
function Hooks() {

  /** @lends Hooks.prototype *////
  var funcs = {

    /**
     *
     * attackHook
     * @listens     attack Event
     * @description Event listener that is triggered when an entity is attacked
     *              When the event is fired, the following data is sent as
     *              arguments to this function:
     *
     * @param {entity} attackerId - the attacker's native entity id
     * @param {entity} victimId   - the victim's native entity id
     *
     * @example
     * <caption>Credit: {@link https://goo.gl/4FYd5w|Connor4898}</caption>
     *
     * // who is attacking who?
     * function attackHook(attacker, victim) {
     *   if (attacker == Player.getEntity()) {
     *     clientMessage("Sir, you shouldn't attack others.");
     *   } else {
     *     clientMessage("Sir, you are under attack!");
     *   }
     * }
     *
     *////
    attackHook: function(attackerId, victimId) {},

    /**
     *
     * blockEventHook
     * @listens     block Eventduggum@gmail.com
     * @description blockEventHook description
     *
     * @param   {int}    x    - description
     * @param   {int}    y    - description
     * @param   {int}    z    - description
     * @param   {Object} type - description
     * @param   {Object} data - description
     *
     * @example
     * <caption>[credit for example]</caption>
     *
     * // [opening comment]
     * [example code]
     *
     * @example
     *
     * // code here
     *
     *////
    blockEventHook: function(x, y, z, type, data) {},

    /**
     *
     * chatHook
     * @listens     chat Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    chatHook: function(text) {},

    /**
     *
     * chatReceiveHook
     * @listens     chatReceive Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    chatReceiveHook: function(String_text, String_senderName) {},

    /**
     *
     * deathHook
     * @listens     death Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    deathHook: function(int_attackerId, int_victimId) {},

    /**
     *
     * destroyBlock
     * @listens     destroyBlock Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    destroyBlock: function(int_x, int_y, int_z, int_side) {},

    /**
     *
     * eatHook
     * @listens     eat Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    eatHook: function(hearts, saturationRatio) {},

    /**
     *
     * entityAddedHook
     * @listens     entityAdded Event
     * @description ?
     *
     ///
    entityAddedHook: function(int_entityId) {},

    /**
     *
     * entityRemovedHook
     * @listens     entityRemoved Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    entityRemovedHook: function(int_entityId) {},

    /**
     *
     * explodeHook
     * @listens     explode Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    explodeHook: function(entity, x, y, z, power, onFire) {},

    /**
     *
     * leaveGame
     * @listens     leaveGame Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    leaveGame: function() {},

    /**
     *
     * levelEventHook
     * @listens     levelEvent
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    levelEventHook: function(player, eventType, x, y, z, data) {},

    /**
     *
     * modTick
     * @listens     modTick Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    modTick: function() {},

    /**
     *
     * newLevel
     * @listens     newLevel Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    newLevel: function() {},

    /**
     *
     * procCmd
     * @listens     procCmd Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    procCmd: function(String_cmd) {},

    /**
     *
     * selectLevelHook
     * @listens     selectLevel Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    selectLevelHook: function() {},

    /**
     *
     * serverMessageReceiveHook
     * @listens     serverMessageReceive Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    serverMessageReceiveHook: function(String_str) {},

    /**
     *
     * startDestroyBlock
     * @listens     startDestroyBlock Event
     * @description ?
     *
     * @example
     *
     * // code here
     *
     *////
    startDestroyBlock: function(int_x, int_y, int_z, int_side) {},

    /**
     *
     * useItem
     * @listens     useItem Event
     * @description Event listener that is triggered when an item is used
     *              to tap or destroy a block. When the event is fired, the
     *              following data is sent as arguments to this function:
     *
     * @param {int} x           - the x coordinate of the block
     * @param {int} y           - the y coordinate of the block
     * @param {int} z           - the z coordinate of the block
     * @param {int} itemid      - the ID of the item used
     * @param {int} blockid     - the ID of the block
     * @param {int} blockSide   - the side of the block that was tapped
     * d@param {int} blockDamage - the damage data for the block
     *
     * @example
     *
     * // code here
     *
     *////
    useItem: function(int_x, int_y, int_z, int_itemid, int_blockid, int_side, int_itemDamage, int_blockDamage) {}
  };
}
